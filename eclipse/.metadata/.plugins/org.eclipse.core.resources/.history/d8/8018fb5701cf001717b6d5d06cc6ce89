package hackerRank;

import java.util.Scanner;
import java.io.BufferedInputStream;

public class DiwaliLights {
//Set tree as per the input in line 
static class Node {
	int key;
	Node left,right;
	public Node(int item){
		key = item;
		left = right = null;
	}
}
class BinTree{
	Node root;

		
	//Create Tree Method
		Node createTree(int parent[], int n){
			Node[]created = new Node[n];
			for (int i=0;i<n;i++)
				created[i] =null;
			for (int i=0;i<n;i++)
				createNode(parent,i,created);		
			
			return root;
		}
	//Create Nodes
		void createNode(int parent[],int i, Node created){
			
		}
	}

 


public static void main (String args[]){
	System.out.println("Please enter the Input :nodes and pair of vertices having bound by edge");
	Scanner input = new Scanner(new BufferedInputStream(System.in));
	// nodes below is total number of nodes in Tree
	int count_nodes = input.nextInt();
	//int vert[]= new int[2*count_nodes];
	//int count=0;
	int vertice=0;
	//char flag=' ';
	int parent[] = new int[count_nodes+1];
	
	int par_index=1;
	//Prepare the parent array 
	parent[1] =-1;
	while (input.hasNext()){
		
		vertice =input.nextInt();
		
		par_index=input.nextInt();
		parent[par_index]=vertice;
		
	}
	//Collect Tree and Create a list of all the edges
	/*while(input.hasNext()){
		//Check for Already listed vertices;
		flag = ' ';
		vertice = input.nextInt();
		for (int i=0;i<count;i++){
			if(vertice == vert[i]){
				flag = 'x';
				break;
			}
		}			
		if(flag == ' '){
		vert[count]=vertice;
		count = count + 1;
		}
	}*/

	
	
	BinTree tree = new BinTree();
	Node node = tree.createTree(parent,count_nodes);
}	
	//Count rest of nodes after detaching edge between each input
//take average of all the counts and return that in your answer
	
	
}
