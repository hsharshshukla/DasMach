class Node {
	int key;
	Node left , right;
	public Node (int item){
		key = item;
		right  =left = null;
	}
}
//Binary Tree
class BinTree{
	Node root;
	BinTree(int key)
	{
		root = new Node(key);
		
	}
	BinTree(){
		root = null;
	}
	
//Recursive Methods;
	void printPostorder(Node node){
		if (node == null)
			return;
		printPostorder (node.left);
		printPostorder(node.right);
		System.out.println(node.key + " ");
	}
	void printPreorder(Node node){
		if (node == null)
			return;
		printPreorder (node.left);
		printPreorder(node.right);
		System.out.println(node.key + " ");
	}
	
	void printInorder(Node node){
		if (node == null)
			return;
		printInorder (node.left);
		printInorder(node.right);
		System.out.println(node.key + " ");
	}
	
	
//Wrappers above Recursive Traversal Methods
	void printPostorder() {
		printPostorder(root);
	}
	void printPreorder() {
		printPreorder(root);
	}
	void printInorder() {
		printInorder(root);
	}
	
	
	public static void main(String args[]){
		BinTree tree = new BinTree();
		tree.root = new Node(1);
		tree.root.left = new Node(2);
		tree.root.right = new Node(3);
/* Tree Structure
        1
      /   \
     2      3
   /    \    /  \
 null null null null  */	
	}
	
}