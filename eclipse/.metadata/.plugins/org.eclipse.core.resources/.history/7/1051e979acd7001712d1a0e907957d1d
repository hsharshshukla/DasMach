package dec_package;
import java.util.Scanner;
public class xor_chef {
	static int ms_xor=0;
	/* arr[]  ---> Input Array
    data[] ---> Temporary array to store current combination
    start & end ---> Staring and Ending indexes in arr[]
    index  ---> Current index in data[]
    r ---> Size of a combination to be printed */
    static void combinationUtil(int arr[], int data[], int start,
                                int end, int index, int r)
    {
        // Current combination is ready to be printed, print it
        if (index == r)
        {	
            for (int j=0; j<r; j++)
                System.out.print(data[j]+" ");
            System.out.println("");
            //XOR Count
            
            return;
        }
 
        // replace index with all possible elements. The condition
        // "end-i+1 >= r-index" makes sure that including one element
        // at index will make a combination with remaining elements
        // at remaining positions
        for (int i=start; i<=end && end-i+1 >= r-index; i++)
        {
            data[index] = arr[i];
            combinationUtil(arr, data, i+1, end, index+1, r);
        }
    }
 
    // The main function that prints all combinations of size r
    // in arr[] of size n. This function mainly uses combinationUtil()
    static void printCombination(int arr[], int n, int r)
    {
        // A temporary array to store all combination one by one
        int data[]=new int[r];
 
        // Print all combination using temprary array 'data[]'
        combinationUtil(arr, data, 0, n-1, 0, r);
    }
	
	public static void main(String args[]){
		Scanner stdin = new Scanner(System.in);
		int l = stdin.nextInt();
		int q = stdin.nextInt();
		int [] arr = new int[l];
		int [] ms = new int[l];
		//Check for l 
		
		for (int i=0;i<l;){ //Preparing Array
			arr [i] = stdin.nextInt();
			if(i>0){
				ms[i]=arr[i];
			}
		}
		 
		for (int j=0;j<q;j++){ //Each Test cases
		  int op = stdin.nextInt(); //Operation type	
			if(op==1){
				int ind=stdin.nextInt(); 
				arr[ind] = stdin.nextInt(); 
			} else if(op==2){
				ms_xor=0;
				int msind=stdin.nextInt();
				if(msind>l-1){
					msind =l-1;
				}
				
	//11211			Using ^(XOR) operator
				for (int k=1;k<=msind;k++){
					
			        int n = arr.length;
			        int r=1;
			        for (int i=1;i<n-1;i++){
			        r = r+1;    
			        printCombination(arr, n, r);
					
				}
			}
			
		}
		
		stdin.close();
	}
}
